properties([
    parameters([
        choice(
            name: 'BUILD_ALL',
            choices: ['0', '1'], 
            description: '전체 서비스 빌드 여부 (0: 변경된 서비스만, 1: 전체 서비스)'
        )
    ])
])

def PIPELINE_ID = "modern-oss-${env.BUILD_NUMBER}"

// 변경된 서비스 탐지 함수
def getChangedServices() {
    def services = [
                    // 'provisioning-service',
                    // 'internet-workflow-service',
                    // 'internet-acquisition-service',
                    // 'internet-completion-service',
                    // 'internet-equipment-service',
                    // 'internet-facility-service',
                    // 'internet-master-service',
                    // 'internet-site-service',
                    //'iptv-acquisition-service',
                    //'iptv-certification-service',
                    //'iptv-completion-service',
                    //'iptv-master-service',
                    //'iptv-site-service',
                    'iptv-workflow-service',
                    'workflow-acl-service'
                ]
    
    // 파라미터가 1이면 모든 서비스 반환
    if (params.BUILD_ALL == '1') {
        echo "Building all services as requested by parameter BUILD_ALL=1"
        return services
    }

    // 1. 현재 레포지토리의 이전 커밋 존재 여부 확인
    def hasPreCommit = sh(script: "git rev-parse HEAD^ >/dev/null 2>&1", returnStatus: true) == 0

    // 2. Manifest 레포지토리 클론 및 Jenkins 커밋 이력 확인
    def hasJenkinsCommit = false
    withCredentials([usernamePassword(
        credentialsId: 'github-credentials',
        usernameVariable: 'GIT_USERNAME',
        passwordVariable: 'GIT_PASSWORD'
    )]) {
        hasJenkinsCommit = sh(
            script: """
                git clone https://\${GIT_USERNAME}:\${GIT_PASSWORD}@github.com/DG-Team-LEGO/MODERN-OSS-SOMF-K8S-MANIFEST.git temp_manifest
                cd temp_manifest
                git log --author="Jenkins" --pretty=format:"%h" -1 >/dev/null 2>&1
                RESULT=\$?
                cd ..
                rm -rf temp_manifest
                exit \$RESULT
            """,
            returnStatus: true
        ) == 0
    }

    // 최초 빌드 조건 확인:
    // 1) 이전 커밋이 없거나
    // 2) Manifest 레포지토리에 Jenkins의 커밋이 없는 경우
    if (!hasPreCommit || !hasJenkinsCommit) {
        echo "Initial build detected - processing all services"
        if (!hasPreCommit) {
            echo "Reason: No previous commits found in source repository"
        }
        if (!hasJenkinsCommit) {
            echo "Reason: No Jenkins commits found in manifest repository"
        }
        return services
    }

    def changedFiles = sh(script: "git diff --name-only HEAD^", returnStdout: true).trim()
    def changedServices = []

    // common 모듈이 변경된 경우 모든 서비스 재빌드 필요
    if (changedFiles.contains('workflow-common/')) {
        return services
    }

    // 각 서비스별 변경사항 확인
    services.each { service ->
        if (changedFiles.contains("${service}/")) {
            changedServices.add(service)
        }
    }

    // 변경된 서비스가 없으면 빈 리스트 반환
    return changedServices.size() > 0 ? changedServices : []
}

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    dateFormat.setTimeZone(TimeZone.getTimeZone('Asia/Seoul'))
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

def checkError(message) {
    if (currentBuild.result == "FAILURE") {
        error "Failed: ${message}"
    }
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'gradle', image: 'gradle:jdk17', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(
            name: 'azure-cli',
            image: 'mcr.microsoft.com/azure-cli',
            command: 'cat',
            ttyEnabled: true,
            envVars: [
                envVar(key: 'HOME', value: '/home/jenkins')
            ]
        )
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        // Environment variables
        def props
        def imageTag = getImageTag()
        def changedServices

        stage('Start Notification') {
            slackSend (channel: '#배포', color: '#FFFF00', message: "CI STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            // 변경된 서비스 확인
            changedServices = getChangedServices()
            echo "Changed services: ${changedServices}"

            // 변경사항이 없으면 파이프라인 종료
            if (changedServices.isEmpty()) {
                currentBuild.result = 'SUCCESS'
                echo "No service changes detected. Skipping build."
                return
            }
        }

        
        try {
            stage('Build Applications') {
                container('gradle') {
                    // 변경된 서비스만 빌드
                    changedServices.each { service ->
                        sh """
                            chmod +x gradlew
                            ./gradlew :${service}:clean :${service}:build -x test \
                            -PspringProfiles=dev \
                            -Dspring.profiles.active=dev
                        """
                    }
                }
                checkError("Application Build Failed")
            }
            stage('Build Container Images') {
                container('podman') {
                    changedServices.each { service ->
                        def imagePath = "${props.registry}/${props.image_org}/${service}/dev"
                        sh """
                            podman build -f deployment/dev/Dockerfile.${service} \
                                --build-arg SPRING_PROFILES_ACTIVE=dev \
                                -t ${imagePath}:${imageTag} \
                                -t ${imagePath}:latest .
                        """
                    }
                }
                checkError("Container Image Build Failed")
            }

            stage('Push Container Images') {
                container('podman') {
                    withCredentials([usernamePassword(
                        credentialsId: "${props.image_credential}",
                        usernameVariable: 'USERNAME',
                        passwordVariable: 'PASSWORD'
                    )]) {
                        sh """
                            podman login ${props.registry} --username \$USERNAME --password \$PASSWORD
                        """

                        changedServices.each { service ->
                            def imagePath = "${props.registry}/${props.image_org}/${service}/dev"
                            sh """
                                podman push ${imagePath}:${imageTag}
                                podman push ${imagePath}:latest
                            """
                        }
                    }
                }
                checkError("Container Image Push Failed")
            }

            stage('Trigger CD') {
                container('gradle') {
                    withCredentials([usernamePassword(
                        credentialsId: 'github-credentials',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh """
                            # Install yq if not already installed
                            if ! command -v yq &> /dev/null; then
                                echo "Installing yq..."
                                wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
                                chmod +x /usr/local/bin/yq
                            fi

                            # Clone repository and update manifests
                            git clone https://\${GIT_USERNAME}:\${GIT_PASSWORD}@github.com/DG-Team-LEGO/MODERN-OSS-SOMF-K8S-MANIFEST.git
                            cd MODERN-OSS-SOMF-K8S-MANIFEST

                            changed_services="${changedServices.join(' ')}"
                            if [ -z "\$changed_services" ]; then
                                echo "No services to update. Skipping CD trigger."
                                exit 0
                            fi

                            for service in \$changed_services; do
                                yq eval ".spec.template.spec.containers[0].image = \\"${props.registry}/${props.image_org}/\${service}/dev:${imageTag}\\"" -i overlays/dev/\${service}/deployment.yaml
                            done

                            git config --global user.email "jenkins@dgteam.com"
                            git config --global user.name "Jenkins"
                            git add .
                            git diff --cached --exit-code --quiet || git commit -m "Update image tags to ${imageTag} for services: ${changedServices.join(', ')}"
                            git push origin main
                        """
                    }
                }
                checkError("CD Trigger Failed")
            }

            currentBuild.result = 'SUCCESS'
            echo "**** FINISH ALL STAGES : SUCCESS"
            echo "Successfully processed services: ${changedServices}"
            slackSend (channel: '#배포', color: '#00FF00', message: "CI SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

        } catch(e) {
            currentBuild.result = "FAILED"
            echo "**** ERROR: ${e.getMessage()}"
            slackSend (channel: '#배포', color: '#FF0000', message: "CI FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            throw e
        }
    }
}
